
<!-- Table Type Pricing Modal - Redesigned -->
<div id="addTableTypePricingModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300" id="tableTypePricingBackdrop"></div>
    
    <div class="relative bg-white rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-300 ease-out translate-y-10 opacity-0"
         id="tableTypePricingModalContent">
      <div class="bg-gradient-to-r from-green-600 to-green-500 px-6 py-4 rounded-t-xl flex justify-between items-center">
        <h3 class="text-xl font-semibold text-white">Цены для типа стола</h3>
        <button type="button" class="text-white hover:text-green-200 transition-colors" onclick="closeModal('addTableTypePricingModal')">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div class="p-6">
        <form id="tableTypePricingForm" class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Тип стола*</label>
              <select name="table_type" required
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                <option value="">Выберите тип</option>
                {% for table_type in table_types %}
                <option value="{{ table_type.id }}">{{ table_type.name }}</option>
                {% endfor %}
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Тарифный план*</label>
              <select name="pricing_plan" required
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                <option value="">Выберите тариф</option>
                {% for plan in pricing_plans %}
                <option value="{{ plan.id }}">{{ plan.name }}</option>
                {% endfor %}
              </select>
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Цена за час (₽)*</label>
              <input type="number" name="hour_rate" required min="0"
                     class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                     placeholder="400">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Групповая цена (₽)*</label>
              <input type="number" name="hour_rate_group" required min="0"
                     class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                     placeholder="600">
            </div>
          </div>
          
          <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-lg">
            <div class="flex">
              <svg class="h-5 w-5 text-yellow-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
              </svg>
              <p class="ml-3 text-sm text-yellow-700">
                Убедитесь, что такая комбинация типа стола и тарифа еще не существует
              </p>
            </div>
          </div>
        </form>
      </div>
      
      <div class="bg-gray-50 px-6 py-4 rounded-b-xl flex justify-end space-x-3">
        <button type="button" onclick="closeModal('addTableTypePricingModal')" 
                class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition">
          Отмена
        </button>
        <button type="button" onclick="saveTableTypePricing()" 
                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition">
          Сохранить цены
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Unified modal functions
  function openModal(modalId) {
    const modal = document.getElementById(modalId);
    const backdrop = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}Backdrop`);
    const content = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}ModalContent`);
    
    modal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
    
    // Trigger animations
    setTimeout(() => {
      backdrop.classList.add('opacity-100');
      content.classList.add('opacity-100', 'translate-y-0');
    }, 10);
  }
  
  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    const backdrop = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}Backdrop`);
    const content = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}ModalContent`);
    
    backdrop.classList.remove('opacity-100');
    content.classList.remove('opacity-100', 'translate-y-0');
    
    setTimeout(() => {
      modal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }, 300);
  }
  
  // Initialize modals
  document.addEventListener('DOMContentLoaded', () => {
    const modals = ['addPricingPlanModal', 'addSpecialOfferModal', 'addTableTypePricingModal'];
    modals.forEach(modalId => {
      const backdrop = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}Backdrop`);
      const content = document.getElementById(`${modalId.replace('add', '').replace('Modal', '')}ModalContent`);
      
      if (backdrop && content) {
        backdrop.classList.add('opacity-0');
        content.classList.add('opacity-0', 'translate-y-10');
      }
    });
  });
  
  // Form submission handlers
  async function savePricingPlan() {
    const form = document.getElementById('pricingPlanForm');
    const saveBtn = document.querySelector('#addPricingPlanModal button[onclick="savePricingPlan()"]');
    
    if (form.checkValidity()) {
      try {
        // Show loading state
        saveBtn.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Сохранение...
        `;
        saveBtn.disabled = true;
        
        // Here would be your actual API call
        // const response = await fetch('/api/pricing-plans', { method: 'POST', body: new FormData(form) });
        
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Show success and close
        showNotification('Тарифный план успешно создан!', 'success');
        closeModal('addPricingPlanModal');
        form.reset();
      } catch (error) {
        showNotification('Ошибка при сохранении: ' + error.message, 'error');
      } finally {
        saveBtn.innerHTML = 'Сохранить тариф';
        saveBtn.disabled = false;
      }
    } else {
      form.reportValidity();
    }
  }
  
  // Similar functions for other modals...
  
  // Notification system
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white font-medium flex items-center transform translate-x-full opacity-0 transition-all duration-300 ${
      type === 'success' ? 'bg-green-500' : 'bg-red-500'
    }`;
    
    notification.innerHTML = `
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${
          type === 'success' ? 'M5 13l4 4L19 7' : 'M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
        }"></path>
      </svg>
      ${message}
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
      notification.classList.add('translate-x-0', 'opacity-100');
    }, 50);
    
    setTimeout(() => {
      notification.classList.remove('translate-x-0', 'opacity-100');
      notification.classList.add('translate-x-full', 'opacity-0');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
</script>