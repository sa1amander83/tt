import {$, $$} from '../../utils/dom.js';
import {BookingAPI} from '../../api/booking.js';
import {CalendarUI} from '../calendar/index.js';
import {CalendarAPI} from "../../api/calendar.js";
import {EquipmentAPI} from '../../api/equipment.js';
import {csrfToken} from "../../utils/getcsrf.js";


export const BookingModal = {
    store: null,


    init(store) {
        this.store = store;
        $('#booking-form')?.addEventListener('submit', (e) => this.submit(e));
        $('#close-modal')?.addEventListener('click', () => this.close());
        $('#cancel-booking')?.addEventListener('click', () => this.close());


        // $('#apply-promo-btn')?.addEventListener('click', async () => {
        //     const code = $('#promo-code')?.value.trim();
        //     const userId = window.CURRENT_USER_ID || null;
        //
        //     if (!code) return;
        //
        //     const res = await PromoAPI.validate(code, userId);
        //     const msg = $('#promo-code-message');
        //
        //     if (res.valid) {
        //         this.store.set({promoCode: res, promoApplied: true});
        //         msg.textContent = res.description;
        //         msg.className = 'text-xs text-green-600';
        //         this.updateBookingCost();
        //     } else {
        //         msg.textContent = res.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
        //         msg.className = 'text-xs text-red-600';
        //     }
        // });

    },

    close() {
        $('#booking-modal')?.classList.add('hidden');
    },

    async open({date, time, tableId}) {

        // 1. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç –∏–ª–∏ –¥–∞—Ç–∞ –¥—Ä—É–≥–∞—è ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º
        let {settings} = this.store.get();
        if (!settings?.open_time || settings.date !== date) {
            settings = await CalendarAPI.settings(new Date(date));
            this.store.set({settings});
        }
        const tables = await fetch('api/tables/');
        const tablesData = await tables.json();
        this.store.set({tables: tablesData});
        // üîÅ 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

        let {pricing} = this.store.get();
        if (!pricing || pricing.length === 0) {
            const ratesResponse = await fetch('api/rates/');
            const ratesData = await ratesResponse.json();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –∏ —Ç–∏–ø—ã —Å—Ç–æ–ª–æ–≤
            this.store.set({
                table_types: ratesData.table_types,
                pricing: ratesData.pricing_plans || [ratesData] // —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            });
        }

        async function fetchPrice(date, time, tableId, duration) {
            const res = await fetch(`/bookings/api/get-booking-info/?date=${date}&time=${time}&table_id=${tableId}&duration=${duration}`);
            if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É');
            return res.json();
        }

        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        const equipment = await EquipmentAPI.list();
        this.populateEquipmentOptions(equipment);


        const schedule = await CalendarAPI.schedule(new Date(date));
        this.store.set({schedule});
        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç
        this.slot = {date, time, tableId};

        // 5. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        this.populateTableSelect(tableId);
        this.populateTimeSelect(time);
        this.populateParticipants(tableId);

        $('#booking-date').value = date;
        await this.updateBookingCost();
        // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        $('#booking-modal').classList.remove('hidden');

        // 7. –°–ª—É—à–∞—Ç–µ–ª–∏
        $('#booking-duration')?.addEventListener('change', () => this.updateBookingCost());
        $('#booking-start-time')?.addEventListener('change', () => this.updateBookingCost());
        $('#booking-table')?.addEventListener('change', () => {
            this.populateParticipants($('#booking-table').value);
            this.populateTimeSelect($('#booking-start-time').value); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            this.updateBookingCost();
        });
        document.getElementById("apply-promo-btn").addEventListener("click", async () => {
                const codeInput = document.getElementById("promo-code");
                const message = document.getElementById("promo-code-message");
                const code = codeInput.value.trim().toLowerCase();

                if (!code) {
                    message.textContent = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.";
                    message.classList.remove("hidden");
                    message.classList.replace("text-green-600", "text-red-600");
                    return;
                }

                try {
                    const response = await fetch("/management/validate-promo/", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            'X-CSRFToken': csrfToken
                        },
                        body: JSON.stringify({
                            code: code,
                            user_id: this.store.currentUserId || null
                        })
                    });

                    if (!response.ok) {
                        const text = await response.text();
                        throw new Error(text || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
                    }

                    const data = await response.json();

                    if (!data.valid) {
                        throw new Error(data.error || "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥");
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    this.store.promoCode = {
                        code: code,
                        discount_percent: data.discount_percent || 0,
                        description: data.description || code,
                        promo_type: data.promo_type || 'percent'
                    };
                    this.store.promoApplied = true;

                    message.textContent = `–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω: ${this.store.promoCode.description}`;

                    message.classList.remove("text-red-600");
                    message.classList.add("text-green-600");
                    message.classList.remove("hidden");
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
                    await this.updateBookingCost();

                } catch (err) {
                    try {
                        const errorJson = JSON.parse(err.message); // err.message ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ '{"error": "..."}'
                        message.textContent = errorJson.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
                    } catch (e) {
                        message.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥';
                    }

                    message.classList.remove("text-green-600");
                    message.classList.add("text-red-600");
                    message.classList.remove('hidden');
                    return false;
                }

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏
                await this.updateBookingCost();
            }
        )

        $('#participants')?.addEventListener('change', () => this.updateBookingCost());

    },


    populateTableSelect(defaultId) {
        const {tables, table_types} = this.store.get();
        const sel = $('#booking-table');
        sel.innerHTML = '';

        tables.forEach(t => {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ table_type
            const tableType = t.table_type || {};
            const tableTypeId = tableType.id ? Number(tableType.id) : null;

            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Å—Ç–æ–ª–∞ –≤ table_types
            const typeInfo = table_types?.find(p => p.id === tableTypeId);
            const price = typeInfo?.hour_rate || 0;
            const capacity = tableType.max_capacity || 2; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            const opt = document.createElement('option');
            opt.value = t.id;
            opt.textContent = `${t.description}`;
            opt.dataset.price = price;
            opt.dataset.capacity = capacity;
            sel.appendChild(opt);
        });

        sel.value = String(defaultId);
        this.populateParticipants(sel.value);
        sel.addEventListener('change', () => this.populateParticipants(sel.value));
    }
    ,
    populateTimeSelect(defaultTime) {
        const {settings} = this.store.get();
        const open = settings?.current_day?.open_time ?? '09:00';
        const close = settings?.current_day?.close_time ?? '22:00';
        const tableId = this.slot?.tableId || $('#booking-table')?.value;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        const scheduleData = this.store.get().schedule ?? {};
        const scheduleArray = Array.isArray(scheduleData) ? scheduleData : scheduleData.schedule ?? [];
        const tableSchedule = scheduleArray.find(s => s.table_id === Number(tableId))?.bookings ?? [];

        const sel = $('#booking-start-time');
        sel.innerHTML = '';

        let currentTime = new Date(`${this.slot.date}T${open}`);
        const endTime = new Date(`${this.slot.date}T${close}`);
        const now = new Date();

        const minDuration = 30; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        const step = 30; // —à–∞–≥ –≤ –º–∏–Ω—É—Ç–∞—Ö

        while (currentTime < endTime) {
            const timeStr = currentTime.toTimeString().substring(0, 5);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            if (currentTime <= now) {
                currentTime = new Date(currentTime.getTime() + step * 60000);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
            let isAvailable = true;
            const slotEnd = new Date(currentTime.getTime() + minDuration * 60000);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
            for (const booking of tableSchedule) {
                const bookingStart = new Date(booking.start_time);
                const bookingEnd = new Date(booking.end_time);

                if ((currentTime >= bookingStart && currentTime < bookingEnd) ||
                    (slotEnd > bookingStart && slotEnd <= bookingEnd) ||
                    (currentTime <= bookingStart && slotEnd >= bookingEnd)) {
                    isAvailable = false;
                    break;
                }
            }

            if (isAvailable) {
                const opt = document.createElement('option');
                opt.value = timeStr;
                opt.textContent = timeStr;
                opt.selected = timeStr === defaultTime;
                sel.appendChild(opt);
            }

            currentTime = new Date(currentTime.getTime() + step * 60000);
        }
    }
    ,
    populateParticipants(tableId) {
        const sel = $('#participants');
        const table = this.store.get().tables.find(t => String(t.id) === String(tableId));


        if (!table) return;

        sel.innerHTML = '';
        for (let i = 1; i <= table.capacity; i++) {
            const opt = document.createElement('option');
            opt.value = i;
            opt.textContent = i;
            sel.appendChild(opt);
        }
        sel.value = Math.min(2, table.capacity); // –¥–µ—Ñ–æ–ª—Ç 2, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ max
    }
    ,
    populateEquipmentOptions(list) {
        const container = $('#equipment-container');
        container.addEventListener('change', () => this.updateBookingCost());
        container.innerHTML = '';
        list.forEach(item => {
            const div = document.createElement('div');
            div.className = 'equipment-item mb-2';
            div.innerHTML = `
      <label class="flex items-center">
        <input type="checkbox" name="equipment" value="${item.id}"
               class="equipment-checkbox mr-2 border-2 border-green-500"
               data-price-hour="${item.price_per_hour}"
               data-price-half-hour="${item.price_per_half_hour}">
        <span>${item.name}</span>
      </label>
    `;
            container.appendChild(div);
        });

    }

    // getNextBookingTime(date, time, tableId) {
    //     const {settings} = this.store.get();
    //     const schedule = settings?.current_day?.schedule ?? [];
    //
    //     const tableSchedule = schedule.find(s => s.table_id === Number(tableId))?.bookings || [];
    //     const startTime = new Date(`${date}T${time}`);
    //
    //     // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    //     const nextBooking = tableSchedule
    //         .filter(b => new Date(b.start_time) > startTime)
    //         .sort((a, b) => new Date(a.start_time) - new Date(b.start_time))[0];
    //
    //     return nextBooking ? new Date(nextBooking.start_time) : null;
    // }
    ,
    async updateBookingCost() {

        try {
            const {user} = this.store.get();
            if (!user || !user.isAuthenticated) {
                // –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                $('#tariff-summary')?.classList.add('hidden');
                return;
            }

            const formData = this.getFormPayload();

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É duration_minutes
            if (isNaN(formData.duration_minutes) || formData.duration_minutes <= 0) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
            }

            const params = new URLSearchParams({
                date: formData.date,
                time: formData.time,
                table_id: formData.table_id,
                duration: formData.duration_minutes,
                is_group: formData.is_group ? 'true' : 'false',
                equipment: JSON.stringify(formData.equipment)
            });

            const res = await fetch(`api/get-booking-info/?${params.toString()}`);

            if (!res.ok) {
                const text = await res.text();
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status} ${res.statusText} ‚Äî ${text}`);
            }

            const data = await res.json();
            const maxDur = this.getAllowedDurations(formData.time);

            const effectiveMax = Math.min(maxDur, data?.max_duration || 180);

            this.populateDurationOptions(data?.min_duration || 30, effectiveMax);

            const promo = this.store.get().promoCode;
            const discountMultiplier = (this.store.get().promoApplied && promo?.discount_percent)
                ? (100 - promo.discount_percent) / 100 : 1;

            $('#tariff-name').textContent = data.tariff_description || data.pricing_plan || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
            $('#tariff-table-cost').textContent = `${Math.round(data.base_price)} ‚ÇΩ`;
            $('#tariff-equipment-cost').textContent = `${Math.round(data.equipment_price || 0)} ‚ÇΩ`;
            $('#tariff-total-cost').textContent = `${Math.round(data.final_price * discountMultiplier)} ‚ÇΩ`;
            $('#tariff-summary')?.classList.remove('hidden');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: " + (err.message || err), 'error');
            $('#tariff-name').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–∞';
            $('#tariff-summary')?.classList.add('hidden');
        }
    },

    async submit(e) {
        e.preventDefault();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const {user} = this.store.get();
            // if (!user || !user.is_authenticated) {
            //     showNotification('–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            //     // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            //     setTimeout(() => {
            //         window.location.href = '/accounts/signin/';
            //     }, 3000);
            //     return;
            // }

            const fd = new FormData(e.target);
            const payload = Object.fromEntries(fd.entries());
            const {promoCode} = this.store.get();

            payload.table_id = Number(payload.table);
            payload.duration = Math.round(Number(payload.duration * 60));
            payload.participants = Number(payload.participants);
            payload.date = this.slot.date;
            payload.start_time = this.slot.time;
            payload.equipment = [...$$('.equipment-checkbox:checked')]
                .map(cb => ({id: Number(cb.value), quantity: 1}));
            payload.slot_id = e.target.dataset.slotId || null;

            if (promoCode) {
                payload.promo_code = promoCode.code;
            }

            const {booking_id} = await BookingAPI.create(payload);
            const paymentRes = await BookingAPI.payment(booking_id);

            if (paymentRes.confirmation_url) {
                window.open(paymentRes.confirmation_url, '_blank');
            } else if (paymentRes.status === 'paid') {
                showNotification('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ.', 'success');
                this.close();
                await CalendarUI.render();
            } else {
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É.', 'error');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
            const message = err?.error || err?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏';
            showNotification(message, 'error');

            // if (err?.login_required) {
            //     showNotification('–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            //     setTimeout(() => {
            //         window.location.href = '/accounts/signin/';
            //     }, 3000);
            //     return;
            // }
        }
    },

    getFormPayload() {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ duration –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        const durationValue = $('#booking-duration')?.value;
        const durationHours = parseFloat(durationValue) || 1; // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1 —á–∞—Å, –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
        const duration_minutes = Math.round(durationHours * 60);

        const equipment = [...$$('.equipment-checkbox:checked')].map(cb => ({
            id: Number(cb.value),
            quantity: 1
        }));

        return {
            date: $('#booking-date')?.value,
            time: $('#booking-start-time')?.value,
            table_id: Number($('#booking-table')?.value),  // <--- –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—é–¥–∞ –±—Ä–∞—Ç—å ID —Å—Ç–æ–ª–∞
            participants: Number($('#participants')?.value),
            is_group: $('#is-group')?.checked || false,
            duration_minutes,
            equipment
        };
    },


getAllowedDurations(startTimeStr) {
    const {settings} = this.store.get();
    const close = settings?.current_day?.close_time ?? '22:00';
    const date = this.slot?.date || $('#booking-date')?.value;
    const tableId = this.slot?.tableId || Number($('#booking-table')?.value);

    if (!startTimeStr) return [];

    const norm = t => t.length === 5 ? t + ':00' : t;
    const startDt = new Date(`${date}T${norm(startTimeStr)}`);
    const closeDt = new Date(`${date}T${norm(close)}`);

    // 1. –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤
    const maxByClose = Math.min(180, Math.floor((closeDt - startDt) / 60000));

    // 2. –±—Ä–æ–Ω–∏ —Å—Ç–æ–ª–∞
    const schedule = this.store.get().schedule ?? [];
    const bookings = (Array.isArray(schedule) ? schedule : schedule.schedule ?? [])
        .find(s => s.table_id === tableId)?.bookings ?? [];

    // 3. –±–ª–∏–∂–∞–π—à–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    const nextStart = bookings
        .map(b => new Date(`${date}T${norm(b.start_time)}`))
        .find(t => t > startDt);

    const limitMin = nextStart
        ? Math.min(180, Math.floor((nextStart - startDt) / 60000))
        : maxByClose;

    // 4. 30, 60, 90 ‚Ä¶
    const step = 30;
    const allowed = [];
    for (let m = step; m <= limitMin; m += step) allowed.push(m);

    return allowed.length ? allowed : [step];
},


   populateDurationOptions() {
    const allowed = this.getAllowedDurations($('#booking-start-time')?.value);
    const sel = $('#booking-duration');
    sel.innerHTML = '';

    allowed.forEach(min => {
        const opt = document.createElement('option');
        opt.value = min / 60;
        opt.textContent = `${Math.floor(min / 60) ? `${Math.floor(min / 60)} —á` : ''}${min % 60 ? ` ${min % 60} –º–∏–Ω` : ''}`.trim();
        sel.appendChild(opt);
    });

    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å (60 –º–∏–Ω), –µ—Å–ª–∏ –µ—Å—Ç—å
    sel.value = allowed.includes(60) ? '1' : (allowed[0] / 60).toString();
}
};

